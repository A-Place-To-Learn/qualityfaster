machine:
  node:
    version: 6.5.0
  java:
    # This is needed by Chimp to run Selenium so we can start Chrome and Firefox
    version: oraclejdk8
  environment:
    # Circle runs each command in a separate shell. This mechanism allows us to centralize varialbes in this file
    DEPLOY_SITE: qualityfaster
    BROWSER: chrome

dependencies:
  cache_directories:
    - "node_modules"
    - "~/.npm"
    - "~/.meteor"

  override:
    # Cache npm dependencies
    - npm install

    # Cache Chimp's dependencies
      # Running Chimp with an empty directory for path means it will not run any tests. This allows us to run Chimp
      # quickly and download runtime dependencies so they can be cached.
    - mkdir ./tmp && ./node_modules/.bin/chimp --path=./tmp && rm -rf ./tmp # there are no tests here

    # Cache Karma's dependencies
      # The karma.options.js file defines a basePath of '.' and a test path of `src`, and since the config file is in
      # ./config, it means karma will look for tests under ./config/src where there is a simple test file. This allows
      # us to run Karma quickly and download runtime dependencies so they can be cached
    - ./node_modules/.bin/karma start ./config/karma.config.js || true

    # Cache Meteor
    - if [ -d ~/.meteor ]; then sudo ln -s ~/.meteor/meteor /usr/local/bin/meteor; fi # setup the meteor command
    - if [ ! -e $HOME/.meteor/meteor ]; then curl https://install.meteor.com | sh; fi # install Meteor

test:
  override:
    # The build & test lifecycle is orchestrated by Gulp, which is wired up through npm's test script
    - npm test

# For the deployment code below to work, you need to first carry out the following steps on your local machine:
# 1.  Create a Meteor developer account and sign-up for Galaxy
# 2a. Login with Meteor and save the session to file
#     METEOR_SESSION_FILE=meteor-session-file.json meteor login
# 2b. Use Node.js to encode and output the file as a Base64 string
#     FILE_CONTENT=`cat meteor-session-file.json` node -e "console.log(new Buffer(process.env.FILE_CONTENT).toString('base64'))"
# 3.  Copy & paste the output in an environment variable called METEOR_SESSION_FILE_CONTENT in the project settings on CircleCI

deployment:
  # We deploy to production any time the previous test step passed AND...
  production:
   # ...when the commit is made to this branch
   branch: dev
   commands:
   # We use the script to deploy
  - scripts/deploy.sh
